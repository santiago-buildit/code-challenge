package routes

import (
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	_ "github.com/santiago-buildit/code-challenge/backend/docs" // Swagger docs (autogenerated from Makefile)
	"github.com/santiago-buildit/code-challenge/backend/internal/config"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"net/http"
	"os"
	"strings"
)

// SetupRouter initializes the router and registers all routes
func SetupRouter() *gin.Engine {

	r := gin.Default()

	// Avoid CloudFront or browser Cache
	r.Use(NoCacheMiddleware())

	// Dev-specific features
	stage := os.Getenv("STAGE")
	if stage == "dev" {

		// Register CORS middleware (keep before any route)
		r.Use(CORSMiddleware())

		// Register Swagger handler
		r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
		r.GET("/swagger", func(c *gin.Context) { // Redirect to index
			c.Redirect(http.StatusMovedPermanently, "/api/swagger/index.html")
		})
	}

	// Get all dependencies
	deps := config.InitDependencies()

	// Register Routes
	RegisterBookRoutes(r, deps.BookHandler)
	// (.. more routes here)

	// Register global 404 handler
	r.NoRoute(notFoundHandler)

	return r
}

// NoCacheMiddleware sets the Cache-Control header to no-store
func NoCacheMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Writer.Header().Set("Cache-Control", "no-store")
		c.Next()
	}
}

// CORSMiddleware sets up CORS for the application
func CORSMiddleware() gin.HandlerFunc {
	return cors.New(cors.Config{
		AllowOriginFunc: func(origin string) bool {
			return strings.HasPrefix(origin, "http://localhost:") || strings.Contains(origin, "cloudfront.net")
		},
		AllowMethods:     []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Content-Type", "Accept", "Authorization"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
	})
}

// Generic 404 handler
func notFoundHandler(c *gin.Context) {
	c.JSON(404, gin.H{"error": "Route not found"})
}
